{"ast":null,"code":"// nodejs IncomingHttpHeaders is Record<string, string | string[]>, but it's actually this:\n\nexport let ENCRYPTION_TYPES = /*#__PURE__*/function (ENCRYPTION_TYPES) {\n  ENCRYPTION_TYPES[\"SSEC\"] = \"SSE-C\";\n  ENCRYPTION_TYPES[\"KMS\"] = \"KMS\";\n  return ENCRYPTION_TYPES;\n}({});\nexport let RETENTION_MODES = /*#__PURE__*/function (RETENTION_MODES) {\n  RETENTION_MODES[\"GOVERNANCE\"] = \"GOVERNANCE\";\n  RETENTION_MODES[\"COMPLIANCE\"] = \"COMPLIANCE\";\n  return RETENTION_MODES;\n}({});\nexport let RETENTION_VALIDITY_UNITS = /*#__PURE__*/function (RETENTION_VALIDITY_UNITS) {\n  RETENTION_VALIDITY_UNITS[\"DAYS\"] = \"Days\";\n  RETENTION_VALIDITY_UNITS[\"YEARS\"] = \"Years\";\n  return RETENTION_VALIDITY_UNITS;\n}({});\nexport let LEGAL_HOLD_STATUS = /*#__PURE__*/function (LEGAL_HOLD_STATUS) {\n  LEGAL_HOLD_STATUS[\"ENABLED\"] = \"ON\";\n  LEGAL_HOLD_STATUS[\"DISABLED\"] = \"OFF\";\n  return LEGAL_HOLD_STATUS;\n}({});\n\n/* Replication Config types */\n\n/* Replication Config types */","map":{"version":3,"names":["ENCRYPTION_TYPES","RETENTION_MODES","RETENTION_VALIDITY_UNITS","LEGAL_HOLD_STATUS"],"sources":["/Users/admin/Documents/analytical_engineering/Docker_Analytics_Sandbox/src/react-app/node_modules/minio/dist/esm/internal/type.ts"],"sourcesContent":["import type * as http from 'node:http'\nimport type { Readable as ReadableStream } from 'node:stream'\n\nexport type Binary = string | Buffer\n\n// nodejs IncomingHttpHeaders is Record<string, string | string[]>, but it's actually this:\nexport type ResponseHeader = Record<string, string>\n\nexport type ObjectMetaData = Record<string, string | number>\n\nexport type RequestHeaders = Record<string, string | boolean | number | undefined>\n\nexport type Encryption =\n  | {\n      type: ENCRYPTION_TYPES.SSEC\n    }\n  | {\n      type: ENCRYPTION_TYPES.KMS\n      SSEAlgorithm?: string\n      KMSMasterKeyID?: string\n    }\n\nexport enum ENCRYPTION_TYPES {\n  /**\n   * SSEC represents server-side-encryption with customer provided keys\n   */\n  SSEC = 'SSE-C',\n  /**\n   * KMS represents server-side-encryption with managed keys\n   */\n  KMS = 'KMS',\n}\n\nexport enum RETENTION_MODES {\n  GOVERNANCE = 'GOVERNANCE',\n  COMPLIANCE = 'COMPLIANCE',\n}\n\nexport enum RETENTION_VALIDITY_UNITS {\n  DAYS = 'Days',\n  YEARS = 'Years',\n}\n\nexport enum LEGAL_HOLD_STATUS {\n  ENABLED = 'ON',\n  DISABLED = 'OFF',\n}\n\nexport type Transport = Pick<typeof http, 'request'>\n\nexport interface IRequest {\n  protocol: string\n  port?: number | string\n  method: string\n  path: string\n  headers: RequestHeaders\n}\n\nexport type ICanonicalRequest = string\n\nexport interface IncompleteUploadedBucketItem {\n  key: string\n  uploadId: string\n  size: number\n}\n\nexport interface MetadataItem {\n  Key: string\n  Value: string\n}\n\nexport interface ItemBucketMetadataList {\n  Items: MetadataItem[]\n}\n\nexport interface ItemBucketMetadata {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any\n}\n\nexport interface BucketItemFromList {\n  name: string\n  creationDate: Date\n}\n\nexport interface BucketItemCopy {\n  etag: string\n  lastModified: Date\n}\n\nexport type BucketItem =\n  | {\n      name: string\n      size: number\n      etag: string\n      prefix?: never\n      lastModified: Date\n    }\n  | {\n      name?: never\n      etag?: never\n      lastModified?: never\n      prefix: string\n      size: 0\n    }\n\nexport type BucketItemWithMetadata = BucketItem & {\n  metadata?: ItemBucketMetadata | ItemBucketMetadataList\n}\n\nexport interface BucketStream<T> extends ReadableStream {\n  on(event: 'data', listener: (item: T) => void): this\n\n  on(event: 'end' | 'pause' | 'readable' | 'resume' | 'close', listener: () => void): this\n\n  on(event: 'error', listener: (err: Error) => void): this\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  on(event: string | symbol, listener: (...args: any[]) => void): this\n}\n\nexport interface BucketItemStat {\n  size: number\n  etag: string\n  lastModified: Date\n  metaData: ItemBucketMetadata\n  versionId?: string | null\n}\n\nexport type StatObjectOpts = {\n  versionId?: string\n}\n\n/* Replication Config types */\nexport type ReplicationRuleStatus = {\n  Status: 'Enabled' | 'Disabled'\n}\n\nexport type Tag = {\n  Key: string\n  Value: string\n}\n\nexport type ReplicationRuleDestination = {\n  Bucket: string\n  StorageClass: string\n}\nexport type ReplicationRuleAnd = {\n  Prefix: string\n  Tags: Tag[]\n}\n\nexport type ReplicationRuleFilter = {\n  Prefix: string\n  And: ReplicationRuleAnd\n  Tag: Tag\n}\n\nexport type ReplicaModifications = {\n  Status: ReplicationRuleStatus\n}\n\nexport type SourceSelectionCriteria = {\n  ReplicaModifications: ReplicaModifications\n}\n\nexport type ExistingObjectReplication = {\n  Status: ReplicationRuleStatus\n}\n\nexport type ReplicationRule = {\n  ID: string\n  Status: ReplicationRuleStatus\n  Priority: number\n  DeleteMarkerReplication: ReplicationRuleStatus // should be set to \"Disabled\" by default\n  DeleteReplication: ReplicationRuleStatus\n  Destination: ReplicationRuleDestination\n  Filter: ReplicationRuleFilter\n  SourceSelectionCriteria: SourceSelectionCriteria\n  ExistingObjectReplication: ExistingObjectReplication\n}\n\nexport type ReplicationConfigOpts = {\n  role: string\n  rules: ReplicationRule[]\n}\n\nexport type ReplicationConfig = {\n  ReplicationConfiguration: ReplicationConfigOpts\n}\n/* Replication Config types */\n\nexport type ResultCallback<T> = (error: Error | null, result: T) => void\n"],"mappings":"AAKA;;AAiBA,WAAYA,gBAAgB,0BAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAA,OAAhBA,gBAAgB;AAAA;AAW5B,WAAYC,eAAe,0BAAfA,eAAe;EAAfA,eAAe;EAAfA,eAAe;EAAA,OAAfA,eAAe;AAAA;AAK3B,WAAYC,wBAAwB,0BAAxBA,wBAAwB;EAAxBA,wBAAwB;EAAxBA,wBAAwB;EAAA,OAAxBA,wBAAwB;AAAA;AAKpC,WAAYC,iBAAiB,0BAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAjBA,iBAAiB;EAAA,OAAjBA,iBAAiB;AAAA;;AA0F7B;;AAyDA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}