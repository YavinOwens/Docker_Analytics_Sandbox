{"ast":null,"code":"// Build PostPolicy object that can be signed by presignedPostPolicy\nimport * as errors from \"../errors.mjs\";\nimport { isObject, isValidBucketName, isValidObjectName, isValidPrefix } from \"./helper.mjs\";\nexport class PostPolicy {\n  policy = {\n    conditions: []\n  };\n  formData = {};\n\n  // set expiration date\n  setExpires(date) {\n    if (!date) {\n      throw new errors.InvalidDateError('Invalid date: cannot be null');\n    }\n    this.policy.expiration = date.toISOString();\n  }\n\n  // set object name\n  setKey(objectName) {\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name : ${objectName}`);\n    }\n    this.policy.conditions.push(['eq', '$key', objectName]);\n    this.formData.key = objectName;\n  }\n\n  // set object name prefix, i.e policy allows any keys with this prefix\n  setKeyStartsWith(prefix) {\n    if (!isValidPrefix(prefix)) {\n      throw new errors.InvalidPrefixError(`Invalid prefix : ${prefix}`);\n    }\n    this.policy.conditions.push(['starts-with', '$key', prefix]);\n    this.formData.key = prefix;\n  }\n\n  // set bucket name\n  setBucket(bucketName) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name : ${bucketName}`);\n    }\n    this.policy.conditions.push(['eq', '$bucket', bucketName]);\n    this.formData.bucket = bucketName;\n  }\n\n  // set Content-Type\n  setContentType(type) {\n    if (!type) {\n      throw new Error('content-type cannot be null');\n    }\n    this.policy.conditions.push(['eq', '$Content-Type', type]);\n    this.formData['Content-Type'] = type;\n  }\n\n  // set Content-Type prefix, i.e image/ allows any image\n  setContentTypeStartsWith(prefix) {\n    if (!prefix) {\n      throw new Error('content-type cannot be null');\n    }\n    this.policy.conditions.push(['starts-with', '$Content-Type', prefix]);\n    this.formData['Content-Type'] = prefix;\n  }\n\n  // set Content-Disposition\n  setContentDisposition(value) {\n    if (!value) {\n      throw new Error('content-disposition cannot be null');\n    }\n    this.policy.conditions.push(['eq', '$Content-Disposition', value]);\n    this.formData['Content-Disposition'] = value;\n  }\n\n  // set minimum/maximum length of what Content-Length can be.\n  setContentLengthRange(min, max) {\n    if (min > max) {\n      throw new Error('min cannot be more than max');\n    }\n    if (min < 0) {\n      throw new Error('min should be > 0');\n    }\n    if (max < 0) {\n      throw new Error('max should be > 0');\n    }\n    this.policy.conditions.push(['content-length-range', min, max]);\n  }\n\n  // set user defined metadata\n  setUserMetaData(metaData) {\n    if (!isObject(metaData)) {\n      throw new TypeError('metadata should be of type \"object\"');\n    }\n    Object.entries(metaData).forEach(([key, value]) => {\n      const amzMetaDataKey = `x-amz-meta-${key}`;\n      this.policy.conditions.push(['eq', `$${amzMetaDataKey}`, value]);\n      this.formData[amzMetaDataKey] = value.toString();\n    });\n  }\n}","map":{"version":3,"names":["errors","isObject","isValidBucketName","isValidObjectName","isValidPrefix","PostPolicy","policy","conditions","formData","setExpires","date","InvalidDateError","expiration","toISOString","setKey","objectName","InvalidObjectNameError","push","key","setKeyStartsWith","prefix","InvalidPrefixError","setBucket","bucketName","InvalidBucketNameError","bucket","setContentType","type","Error","setContentTypeStartsWith","setContentDisposition","value","setContentLengthRange","min","max","setUserMetaData","metaData","TypeError","Object","entries","forEach","amzMetaDataKey","toString"],"sources":["/Users/admin/Documents/analytical_engineering/Docker_Analytics_Sandbox/src/react-app/node_modules/minio/dist/esm/internal/post-policy.ts"],"sourcesContent":["// Build PostPolicy object that can be signed by presignedPostPolicy\nimport * as errors from '../errors.ts'\nimport { isObject, isValidBucketName, isValidObjectName, isValidPrefix } from './helper.ts'\nimport type { ObjectMetaData } from './type.ts'\n\nexport class PostPolicy {\n  public policy: { conditions: (string | number)[][]; expiration?: string } = {\n    conditions: [],\n  }\n  public formData: Record<string, string> = {}\n\n  // set expiration date\n  setExpires(date: Date) {\n    if (!date) {\n      throw new errors.InvalidDateError('Invalid date: cannot be null')\n    }\n    this.policy.expiration = date.toISOString()\n  }\n\n  // set object name\n  setKey(objectName: string) {\n    if (!isValidObjectName(objectName)) {\n      throw new errors.InvalidObjectNameError(`Invalid object name : ${objectName}`)\n    }\n    this.policy.conditions.push(['eq', '$key', objectName])\n    this.formData.key = objectName\n  }\n\n  // set object name prefix, i.e policy allows any keys with this prefix\n  setKeyStartsWith(prefix: string) {\n    if (!isValidPrefix(prefix)) {\n      throw new errors.InvalidPrefixError(`Invalid prefix : ${prefix}`)\n    }\n    this.policy.conditions.push(['starts-with', '$key', prefix])\n    this.formData.key = prefix\n  }\n\n  // set bucket name\n  setBucket(bucketName: string) {\n    if (!isValidBucketName(bucketName)) {\n      throw new errors.InvalidBucketNameError(`Invalid bucket name : ${bucketName}`)\n    }\n    this.policy.conditions.push(['eq', '$bucket', bucketName])\n    this.formData.bucket = bucketName\n  }\n\n  // set Content-Type\n  setContentType(type: string) {\n    if (!type) {\n      throw new Error('content-type cannot be null')\n    }\n    this.policy.conditions.push(['eq', '$Content-Type', type])\n    this.formData['Content-Type'] = type\n  }\n\n  // set Content-Type prefix, i.e image/ allows any image\n  setContentTypeStartsWith(prefix: string) {\n    if (!prefix) {\n      throw new Error('content-type cannot be null')\n    }\n    this.policy.conditions.push(['starts-with', '$Content-Type', prefix])\n    this.formData['Content-Type'] = prefix\n  }\n\n  // set Content-Disposition\n  setContentDisposition(value: string) {\n    if (!value) {\n      throw new Error('content-disposition cannot be null')\n    }\n    this.policy.conditions.push(['eq', '$Content-Disposition', value])\n    this.formData['Content-Disposition'] = value\n  }\n\n  // set minimum/maximum length of what Content-Length can be.\n  setContentLengthRange(min: number, max: number) {\n    if (min > max) {\n      throw new Error('min cannot be more than max')\n    }\n    if (min < 0) {\n      throw new Error('min should be > 0')\n    }\n    if (max < 0) {\n      throw new Error('max should be > 0')\n    }\n    this.policy.conditions.push(['content-length-range', min, max])\n  }\n\n  // set user defined metadata\n  setUserMetaData(metaData: ObjectMetaData) {\n    if (!isObject(metaData)) {\n      throw new TypeError('metadata should be of type \"object\"')\n    }\n    Object.entries(metaData).forEach(([key, value]) => {\n      const amzMetaDataKey = `x-amz-meta-${key}`\n      this.policy.conditions.push(['eq', `$${amzMetaDataKey}`, value])\n      this.formData[amzMetaDataKey] = value.toString()\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}