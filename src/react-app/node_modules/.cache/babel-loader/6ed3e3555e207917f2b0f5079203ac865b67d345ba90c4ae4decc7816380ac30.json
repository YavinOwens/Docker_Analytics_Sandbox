{"ast":null,"code":"// Oracle database client using fetch API to communicate with the backend\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nexport const OracleClient = {\n  // Fetch tables from Oracle database\n  async getTables() {\n    try {\n      console.log('Fetching tables from Oracle database');\n      console.log('Using API URL:', API_URL);\n\n      // Use the backend API to fetch tables\n      const response = await fetch(`${API_URL}/api/oracle/tables`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      // Check for HTTP errors\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to fetch tables');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching tables:', error);\n\n      // Fall back to mock data if API call fails\n      return [{\n        name: 'CUSTOMERS',\n        type: 'TABLE',\n        schema: 'ANALYTICS'\n      }, {\n        name: 'ORDERS',\n        type: 'TABLE',\n        schema: 'ANALYTICS'\n      }, {\n        name: 'PRODUCTS',\n        type: 'TABLE',\n        schema: 'ANALYTICS'\n      }, {\n        name: 'EMPLOYEES',\n        type: 'TABLE',\n        schema: 'ANALYTICS'\n      }, {\n        name: 'SALES',\n        type: 'TABLE',\n        schema: 'ANALYTICS'\n      }, {\n        name: 'INVENTORY',\n        type: 'TABLE',\n        schema: 'ANALYTICS'\n      }, {\n        name: 'ORDER_ITEMS',\n        type: 'VIEW',\n        schema: 'ANALYTICS'\n      }, {\n        name: 'CUSTOMER_METRICS',\n        type: 'VIEW',\n        schema: 'ANALYTICS'\n      }];\n    }\n  },\n  // Fetch table schema\n  async getTableSchema(tableName) {\n    try {\n      console.log(`Fetching schema for table: ${tableName}`);\n\n      // Use the backend API to fetch table schema\n      const response = await fetch(`${API_URL}/api/oracle/tables/${tableName}/schema`);\n\n      // Check for HTTP errors\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to fetch table schema');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching schema for table ${tableName}:`, error);\n\n      // Fall back to mock data if API call fails\n      const schemas = {\n        'CUSTOMERS': [{\n          column_name: 'CUSTOMER_ID',\n          data_type: 'NUMBER',\n          nullable: 'N',\n          primary_key: 'Y'\n        }, {\n          column_name: 'NAME',\n          data_type: 'VARCHAR2(100)',\n          nullable: 'N',\n          primary_key: 'N'\n        }, {\n          column_name: 'EMAIL',\n          data_type: 'VARCHAR2(100)',\n          nullable: 'Y',\n          primary_key: 'N'\n        }, {\n          column_name: 'PHONE',\n          data_type: 'VARCHAR2(20)',\n          nullable: 'Y',\n          primary_key: 'N'\n        }, {\n          column_name: 'ADDRESS',\n          data_type: 'VARCHAR2(200)',\n          nullable: 'Y',\n          primary_key: 'N'\n        }, {\n          column_name: 'CREATED_DATE',\n          data_type: 'DATE',\n          nullable: 'N',\n          primary_key: 'N'\n        }],\n        'ORDERS': [{\n          column_name: 'ORDER_ID',\n          data_type: 'NUMBER',\n          nullable: 'N',\n          primary_key: 'Y'\n        }, {\n          column_name: 'CUSTOMER_ID',\n          data_type: 'NUMBER',\n          nullable: 'N',\n          primary_key: 'N'\n        }, {\n          column_name: 'ORDER_DATE',\n          data_type: 'DATE',\n          nullable: 'N',\n          primary_key: 'N'\n        }, {\n          column_name: 'STATUS',\n          data_type: 'VARCHAR2(20)',\n          nullable: 'N',\n          primary_key: 'N'\n        }, {\n          column_name: 'TOTAL_AMOUNT',\n          data_type: 'NUMBER(10,2)',\n          nullable: 'N',\n          primary_key: 'N'\n        }],\n        'PRODUCTS': [{\n          column_name: 'PRODUCT_ID',\n          data_type: 'NUMBER',\n          nullable: 'N',\n          primary_key: 'Y'\n        }, {\n          column_name: 'NAME',\n          data_type: 'VARCHAR2(100)',\n          nullable: 'N',\n          primary_key: 'N'\n        }, {\n          column_name: 'DESCRIPTION',\n          data_type: 'VARCHAR2(500)',\n          nullable: 'Y',\n          primary_key: 'N'\n        }, {\n          column_name: 'PRICE',\n          data_type: 'NUMBER(10,2)',\n          nullable: 'N',\n          primary_key: 'N'\n        }, {\n          column_name: 'CATEGORY',\n          data_type: 'VARCHAR2(50)',\n          nullable: 'Y',\n          primary_key: 'N'\n        }, {\n          column_name: 'INVENTORY_COUNT',\n          data_type: 'NUMBER',\n          nullable: 'Y',\n          primary_key: 'N'\n        }]\n      };\n      return schemas[tableName] || [];\n    }\n  },\n  // Execute a SQL query\n  async executeQuery(query) {\n    try {\n      console.log(`Executing query: ${query}`);\n\n      // Use the backend API to execute the query\n      const response = await fetch(`${API_URL}/api/oracle/query`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          query\n        })\n      });\n\n      // Check for HTTP errors\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to execute query');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error executing query:', error);\n\n      // Fall back to mock data if API call fails\n      if (query.toLowerCase().includes('select * from customers')) {\n        return {\n          columns: ['CUSTOMER_ID', 'NAME', 'EMAIL', 'PHONE', 'ADDRESS', 'CREATED_DATE'],\n          rows: [[1, 'John Doe', 'john.doe@example.com', '555-1234', '123 Main St', '2023-01-15'], [2, 'Jane Smith', 'jane.smith@example.com', '555-5678', '456 Oak Ave', '2023-02-20'], [3, 'Bob Johnson', 'bob.johnson@example.com', '555-9012', '789 Pine Rd', '2023-03-10'], [4, 'Alice Brown', 'alice.brown@example.com', '555-3456', '321 Elm St', '2023-04-05'], [5, 'Charlie Davis', 'charlie.davis@example.com', '555-7890', '654 Maple Dr', '2023-05-12']]\n        };\n      } else if (query.toLowerCase().includes('select * from orders')) {\n        return {\n          columns: ['ORDER_ID', 'CUSTOMER_ID', 'ORDER_DATE', 'STATUS', 'TOTAL_AMOUNT'],\n          rows: [[101, 1, '2023-06-10', 'DELIVERED', 125.50], [102, 2, '2023-06-11', 'SHIPPED', 75.20], [103, 3, '2023-06-12', 'PROCESSING', 220.00], [104, 1, '2023-06-15', 'DELIVERED', 45.99], [105, 4, '2023-06-18', 'PENDING', 150.75]]\n        };\n      } else if (query.toLowerCase().includes('select * from products')) {\n        return {\n          columns: ['PRODUCT_ID', 'NAME', 'DESCRIPTION', 'PRICE', 'CATEGORY', 'INVENTORY_COUNT'],\n          rows: [[201, 'Laptop Pro', 'High-performance laptop', 1299.99, 'Electronics', 45], [202, 'Smartphone X', '5G smartphone with camera', 799.99, 'Electronics', 120], [203, 'Coffee Maker', 'Automatic coffee machine', 129.50, 'Kitchen', 78], [204, 'Wireless Headphones', 'Noise-cancelling headphones', 199.99, 'Audio', 65], [205, 'Fitness Tracker', 'Tracks steps and heart rate', 89.99, 'Wearables', 200]]\n        };\n      } else {\n        return {\n          columns: [],\n          rows: [],\n          message: 'No data returned or query not recognized'\n        };\n      }\n    }\n  }\n};","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","OracleClient","getTables","console","log","response","fetch","headers","ok","errorData","json","Error","detail","error","name","type","schema","getTableSchema","tableName","schemas","column_name","data_type","nullable","primary_key","executeQuery","query","method","body","JSON","stringify","toLowerCase","includes","columns","rows","message"],"sources":["/Users/admin/Documents/analytical_engineering/Docker_Analytics_Sandbox/src/react-app/src/services/oracleClient.js"],"sourcesContent":["// Oracle database client using fetch API to communicate with the backend\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nexport const OracleClient = {\n  // Fetch tables from Oracle database\n  async getTables() {\n    try {\n      console.log('Fetching tables from Oracle database');\n      console.log('Using API URL:', API_URL);\n      \n      // Use the backend API to fetch tables\n      const response = await fetch(`${API_URL}/api/oracle/tables`, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      // Check for HTTP errors\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to fetch tables');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching tables:', error);\n      \n      // Fall back to mock data if API call fails\n      return [\n        { name: 'CUSTOMERS', type: 'TABLE', schema: 'ANALYTICS' },\n        { name: 'ORDERS', type: 'TABLE', schema: 'ANALYTICS' },\n        { name: 'PRODUCTS', type: 'TABLE', schema: 'ANALYTICS' },\n        { name: 'EMPLOYEES', type: 'TABLE', schema: 'ANALYTICS' },\n        { name: 'SALES', type: 'TABLE', schema: 'ANALYTICS' },\n        { name: 'INVENTORY', type: 'TABLE', schema: 'ANALYTICS' },\n        { name: 'ORDER_ITEMS', type: 'VIEW', schema: 'ANALYTICS' },\n        { name: 'CUSTOMER_METRICS', type: 'VIEW', schema: 'ANALYTICS' }\n      ];\n    }\n  },\n  \n  // Fetch table schema\n  async getTableSchema(tableName) {\n    try {\n      console.log(`Fetching schema for table: ${tableName}`);\n      \n      // Use the backend API to fetch table schema\n      const response = await fetch(`${API_URL}/api/oracle/tables/${tableName}/schema`);\n      \n      // Check for HTTP errors\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to fetch table schema');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error(`Error fetching schema for table ${tableName}:`, error);\n      \n      // Fall back to mock data if API call fails\n      const schemas = {\n        'CUSTOMERS': [\n          { column_name: 'CUSTOMER_ID', data_type: 'NUMBER', nullable: 'N', primary_key: 'Y' },\n          { column_name: 'NAME', data_type: 'VARCHAR2(100)', nullable: 'N', primary_key: 'N' },\n          { column_name: 'EMAIL', data_type: 'VARCHAR2(100)', nullable: 'Y', primary_key: 'N' },\n          { column_name: 'PHONE', data_type: 'VARCHAR2(20)', nullable: 'Y', primary_key: 'N' },\n          { column_name: 'ADDRESS', data_type: 'VARCHAR2(200)', nullable: 'Y', primary_key: 'N' },\n          { column_name: 'CREATED_DATE', data_type: 'DATE', nullable: 'N', primary_key: 'N' }\n        ],\n        'ORDERS': [\n          { column_name: 'ORDER_ID', data_type: 'NUMBER', nullable: 'N', primary_key: 'Y' },\n          { column_name: 'CUSTOMER_ID', data_type: 'NUMBER', nullable: 'N', primary_key: 'N' },\n          { column_name: 'ORDER_DATE', data_type: 'DATE', nullable: 'N', primary_key: 'N' },\n          { column_name: 'STATUS', data_type: 'VARCHAR2(20)', nullable: 'N', primary_key: 'N' },\n          { column_name: 'TOTAL_AMOUNT', data_type: 'NUMBER(10,2)', nullable: 'N', primary_key: 'N' }\n        ],\n        'PRODUCTS': [\n          { column_name: 'PRODUCT_ID', data_type: 'NUMBER', nullable: 'N', primary_key: 'Y' },\n          { column_name: 'NAME', data_type: 'VARCHAR2(100)', nullable: 'N', primary_key: 'N' },\n          { column_name: 'DESCRIPTION', data_type: 'VARCHAR2(500)', nullable: 'Y', primary_key: 'N' },\n          { column_name: 'PRICE', data_type: 'NUMBER(10,2)', nullable: 'N', primary_key: 'N' },\n          { column_name: 'CATEGORY', data_type: 'VARCHAR2(50)', nullable: 'Y', primary_key: 'N' },\n          { column_name: 'INVENTORY_COUNT', data_type: 'NUMBER', nullable: 'Y', primary_key: 'N' }\n        ]\n      };\n      \n      return schemas[tableName] || [];\n    }\n  },\n  \n  // Execute a SQL query\n  async executeQuery(query) {\n    try {\n      console.log(`Executing query: ${query}`);\n      \n      // Use the backend API to execute the query\n      const response = await fetch(`${API_URL}/api/oracle/query`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n      });\n      \n      // Check for HTTP errors\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || 'Failed to execute query');\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Error executing query:', error);\n      \n      // Fall back to mock data if API call fails\n      if (query.toLowerCase().includes('select * from customers')) {\n        return {\n          columns: ['CUSTOMER_ID', 'NAME', 'EMAIL', 'PHONE', 'ADDRESS', 'CREATED_DATE'],\n          rows: [\n            [1, 'John Doe', 'john.doe@example.com', '555-1234', '123 Main St', '2023-01-15'],\n            [2, 'Jane Smith', 'jane.smith@example.com', '555-5678', '456 Oak Ave', '2023-02-20'],\n            [3, 'Bob Johnson', 'bob.johnson@example.com', '555-9012', '789 Pine Rd', '2023-03-10'],\n            [4, 'Alice Brown', 'alice.brown@example.com', '555-3456', '321 Elm St', '2023-04-05'],\n            [5, 'Charlie Davis', 'charlie.davis@example.com', '555-7890', '654 Maple Dr', '2023-05-12']\n          ]\n        };\n      } else if (query.toLowerCase().includes('select * from orders')) {\n        return {\n          columns: ['ORDER_ID', 'CUSTOMER_ID', 'ORDER_DATE', 'STATUS', 'TOTAL_AMOUNT'],\n          rows: [\n            [101, 1, '2023-06-10', 'DELIVERED', 125.50],\n            [102, 2, '2023-06-11', 'SHIPPED', 75.20],\n            [103, 3, '2023-06-12', 'PROCESSING', 220.00],\n            [104, 1, '2023-06-15', 'DELIVERED', 45.99],\n            [105, 4, '2023-06-18', 'PENDING', 150.75]\n          ]\n        };\n      } else if (query.toLowerCase().includes('select * from products')) {\n        return {\n          columns: ['PRODUCT_ID', 'NAME', 'DESCRIPTION', 'PRICE', 'CATEGORY', 'INVENTORY_COUNT'],\n          rows: [\n            [201, 'Laptop Pro', 'High-performance laptop', 1299.99, 'Electronics', 45],\n            [202, 'Smartphone X', '5G smartphone with camera', 799.99, 'Electronics', 120],\n            [203, 'Coffee Maker', 'Automatic coffee machine', 129.50, 'Kitchen', 78],\n            [204, 'Wireless Headphones', 'Noise-cancelling headphones', 199.99, 'Audio', 65],\n            [205, 'Fitness Tracker', 'Tracks steps and heart rate', 89.99, 'Wearables', 200]\n          ]\n        };\n      } else {\n        return {\n          columns: [],\n          rows: [],\n          message: 'No data returned or query not recognized'\n        };\n      }\n    }\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}