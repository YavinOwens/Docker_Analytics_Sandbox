{"ast":null,"code":"/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from \"events\";\nimport { DEFAULT_REGION } from \"./helpers.mjs\";\nimport { pipesetup, uriEscape } from \"./internal/helper.mjs\";\nimport * as transformers from \"./transformers.mjs\";\n\n// Notification config - array of target configs.\n// Target configs can be\n// 1. Topic (simple notification service)\n// 2. Queue (simple queue service)\n// 3. CloudFront (lambda function)\nexport class NotificationConfig {\n  add(target) {\n    let instance = '';\n    if (target instanceof TopicConfig) {\n      instance = 'TopicConfiguration';\n    }\n    if (target instanceof QueueConfig) {\n      instance = 'QueueConfiguration';\n    }\n    if (target instanceof CloudFunctionConfig) {\n      instance = 'CloudFunctionConfiguration';\n    }\n    if (!this[instance]) {\n      this[instance] = [];\n    }\n    this[instance].push(target);\n  }\n}\n\n// Base class for three supported configs.\nclass TargetConfig {\n  setId(id) {\n    this.Id = id;\n  }\n  addEvent(newevent) {\n    if (!this.Event) {\n      this.Event = [];\n    }\n    this.Event.push(newevent);\n  }\n  addFilterSuffix(suffix) {\n    if (!this.Filter) {\n      this.Filter = {\n        S3Key: {\n          FilterRule: []\n        }\n      };\n    }\n    this.Filter.S3Key.FilterRule.push({\n      Name: 'suffix',\n      Value: suffix\n    });\n  }\n  addFilterPrefix(prefix) {\n    if (!this.Filter) {\n      this.Filter = {\n        S3Key: {\n          FilterRule: []\n        }\n      };\n    }\n    this.Filter.S3Key.FilterRule.push({\n      Name: 'prefix',\n      Value: prefix\n    });\n  }\n}\n\n// 1. Topic (simple notification service)\nexport class TopicConfig extends TargetConfig {\n  constructor(arn) {\n    super();\n    this.Topic = arn;\n  }\n}\n\n// 2. Queue (simple queue service)\nexport class QueueConfig extends TargetConfig {\n  constructor(arn) {\n    super();\n    this.Queue = arn;\n  }\n}\n\n// 3. CloudFront (lambda function)\nexport class CloudFunctionConfig extends TargetConfig {\n  constructor(arn) {\n    super();\n    this.CloudFunction = arn;\n  }\n}\nexport const buildARN = (partition, service, region, accountId, resource) => {\n  return 'arn:' + partition + ':' + service + ':' + region + ':' + accountId + ':' + resource;\n};\nexport const ObjectCreatedAll = 's3:ObjectCreated:*';\nexport const ObjectCreatedPut = 's3:ObjectCreated:Put';\nexport const ObjectCreatedPost = 's3:ObjectCreated:Post';\nexport const ObjectCreatedCopy = 's3:ObjectCreated:Copy';\nexport const ObjectCreatedCompleteMultipartUpload = 's3:ObjectCreated:CompleteMultipartUpload';\nexport const ObjectRemovedAll = 's3:ObjectRemoved:*';\nexport const ObjectRemovedDelete = 's3:ObjectRemoved:Delete';\nexport const ObjectRemovedDeleteMarkerCreated = 's3:ObjectRemoved:DeleteMarkerCreated';\nexport const ObjectReducedRedundancyLostObject = 's3:ReducedRedundancyLostObject';\n\n// Poll for notifications, used in #listenBucketNotification.\n// Listening constitutes repeatedly requesting s3 whether or not any\n// changes have occurred.\nexport class NotificationPoller extends EventEmitter {\n  constructor(client, bucketName, prefix, suffix, events) {\n    super();\n    this.client = client;\n    this.bucketName = bucketName;\n    this.prefix = prefix;\n    this.suffix = suffix;\n    this.events = events;\n    this.ending = false;\n  }\n\n  // Starts the polling.\n  start() {\n    this.ending = false;\n    process.nextTick(() => {\n      this.checkForChanges();\n    });\n  }\n\n  // Stops the polling.\n  stop() {\n    this.ending = true;\n  }\n  checkForChanges() {\n    // Don't continue if we're looping again but are cancelled.\n    if (this.ending) {\n      return;\n    }\n    let method = 'GET';\n    var queries = [];\n    if (this.prefix) {\n      var prefix = uriEscape(this.prefix);\n      queries.push(`prefix=${prefix}`);\n    }\n    if (this.suffix) {\n      var suffix = uriEscape(this.suffix);\n      queries.push(`suffix=${suffix}`);\n    }\n    if (this.events) {\n      this.events.forEach(s3event => queries.push('events=' + uriEscape(s3event)));\n    }\n    queries.sort();\n    var query = '';\n    if (queries.length > 0) {\n      query = `${queries.join('&')}`;\n    }\n    const region = this.client.region || DEFAULT_REGION;\n    this.client.makeRequest({\n      method,\n      bucketName: this.bucketName,\n      query\n    }, '', [200], region, true, (e, response) => {\n      if (e) {\n        return this.emit('error', e);\n      }\n      let transformer = transformers.getNotificationTransformer();\n      pipesetup(response, transformer).on('data', result => {\n        // Data is flushed periodically (every 5 seconds), so we should\n        // handle it after flushing from the JSON parser.\n        let records = result.Records;\n        // If null (= no records), change to an empty array.\n        if (!records) {\n          records = [];\n        }\n\n        // Iterate over the notifications and emit them individually.\n        records.forEach(record => {\n          this.emit('notification', record);\n        });\n\n        // If we're done, stop.\n        if (this.ending) {\n          response.destroy();\n        }\n      }).on('error', e => this.emit('error', e)).on('end', () => {\n        // Do it again, if we haven't cancelled yet.\n        process.nextTick(() => {\n          this.checkForChanges();\n        });\n      });\n    });\n  }\n}","map":{"version":3,"names":["EventEmitter","DEFAULT_REGION","pipesetup","uriEscape","transformers","NotificationConfig","add","target","instance","TopicConfig","QueueConfig","CloudFunctionConfig","push","TargetConfig","setId","id","Id","addEvent","newevent","Event","addFilterSuffix","suffix","Filter","S3Key","FilterRule","Name","Value","addFilterPrefix","prefix","constructor","arn","Topic","Queue","CloudFunction","buildARN","partition","service","region","accountId","resource","ObjectCreatedAll","ObjectCreatedPut","ObjectCreatedPost","ObjectCreatedCopy","ObjectCreatedCompleteMultipartUpload","ObjectRemovedAll","ObjectRemovedDelete","ObjectRemovedDeleteMarkerCreated","ObjectReducedRedundancyLostObject","NotificationPoller","client","bucketName","events","ending","start","process","nextTick","checkForChanges","stop","method","queries","forEach","s3event","sort","query","length","join","makeRequest","e","response","emit","transformer","getNotificationTransformer","on","result","records","Records","record","destroy"],"sources":["/Users/admin/Documents/analytical_engineering/Docker_Analytics_Sandbox/src/react-app/node_modules/minio/dist/esm/notification.js"],"sourcesContent":["/*\n * MinIO Javascript Library for Amazon S3 Compatible Cloud Storage, (C) 2016 MinIO, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EventEmitter } from 'node:events'\n\nimport { DEFAULT_REGION } from './helpers.ts'\nimport { pipesetup, uriEscape } from './internal/helper.ts'\nimport * as transformers from './transformers.js'\n\n// Notification config - array of target configs.\n// Target configs can be\n// 1. Topic (simple notification service)\n// 2. Queue (simple queue service)\n// 3. CloudFront (lambda function)\nexport class NotificationConfig {\n  add(target) {\n    let instance = ''\n    if (target instanceof TopicConfig) {\n      instance = 'TopicConfiguration'\n    }\n    if (target instanceof QueueConfig) {\n      instance = 'QueueConfiguration'\n    }\n    if (target instanceof CloudFunctionConfig) {\n      instance = 'CloudFunctionConfiguration'\n    }\n    if (!this[instance]) {\n      this[instance] = []\n    }\n    this[instance].push(target)\n  }\n}\n\n// Base class for three supported configs.\nclass TargetConfig {\n  setId(id) {\n    this.Id = id\n  }\n  addEvent(newevent) {\n    if (!this.Event) {\n      this.Event = []\n    }\n    this.Event.push(newevent)\n  }\n  addFilterSuffix(suffix) {\n    if (!this.Filter) {\n      this.Filter = { S3Key: { FilterRule: [] } }\n    }\n    this.Filter.S3Key.FilterRule.push({ Name: 'suffix', Value: suffix })\n  }\n  addFilterPrefix(prefix) {\n    if (!this.Filter) {\n      this.Filter = { S3Key: { FilterRule: [] } }\n    }\n    this.Filter.S3Key.FilterRule.push({ Name: 'prefix', Value: prefix })\n  }\n}\n\n// 1. Topic (simple notification service)\nexport class TopicConfig extends TargetConfig {\n  constructor(arn) {\n    super()\n    this.Topic = arn\n  }\n}\n\n// 2. Queue (simple queue service)\nexport class QueueConfig extends TargetConfig {\n  constructor(arn) {\n    super()\n    this.Queue = arn\n  }\n}\n\n// 3. CloudFront (lambda function)\nexport class CloudFunctionConfig extends TargetConfig {\n  constructor(arn) {\n    super()\n    this.CloudFunction = arn\n  }\n}\n\nexport const buildARN = (partition, service, region, accountId, resource) => {\n  return 'arn:' + partition + ':' + service + ':' + region + ':' + accountId + ':' + resource\n}\n\nexport const ObjectCreatedAll = 's3:ObjectCreated:*'\nexport const ObjectCreatedPut = 's3:ObjectCreated:Put'\nexport const ObjectCreatedPost = 's3:ObjectCreated:Post'\nexport const ObjectCreatedCopy = 's3:ObjectCreated:Copy'\nexport const ObjectCreatedCompleteMultipartUpload = 's3:ObjectCreated:CompleteMultipartUpload'\nexport const ObjectRemovedAll = 's3:ObjectRemoved:*'\nexport const ObjectRemovedDelete = 's3:ObjectRemoved:Delete'\nexport const ObjectRemovedDeleteMarkerCreated = 's3:ObjectRemoved:DeleteMarkerCreated'\nexport const ObjectReducedRedundancyLostObject = 's3:ReducedRedundancyLostObject'\n\n// Poll for notifications, used in #listenBucketNotification.\n// Listening constitutes repeatedly requesting s3 whether or not any\n// changes have occurred.\nexport class NotificationPoller extends EventEmitter {\n  constructor(client, bucketName, prefix, suffix, events) {\n    super()\n\n    this.client = client\n    this.bucketName = bucketName\n    this.prefix = prefix\n    this.suffix = suffix\n    this.events = events\n\n    this.ending = false\n  }\n\n  // Starts the polling.\n  start() {\n    this.ending = false\n\n    process.nextTick(() => {\n      this.checkForChanges()\n    })\n  }\n\n  // Stops the polling.\n  stop() {\n    this.ending = true\n  }\n\n  checkForChanges() {\n    // Don't continue if we're looping again but are cancelled.\n    if (this.ending) {\n      return\n    }\n\n    let method = 'GET'\n    var queries = []\n    if (this.prefix) {\n      var prefix = uriEscape(this.prefix)\n      queries.push(`prefix=${prefix}`)\n    }\n    if (this.suffix) {\n      var suffix = uriEscape(this.suffix)\n      queries.push(`suffix=${suffix}`)\n    }\n    if (this.events) {\n      this.events.forEach((s3event) => queries.push('events=' + uriEscape(s3event)))\n    }\n    queries.sort()\n\n    var query = ''\n    if (queries.length > 0) {\n      query = `${queries.join('&')}`\n    }\n    const region = this.client.region || DEFAULT_REGION\n    this.client.makeRequest({ method, bucketName: this.bucketName, query }, '', [200], region, true, (e, response) => {\n      if (e) {\n        return this.emit('error', e)\n      }\n\n      let transformer = transformers.getNotificationTransformer()\n      pipesetup(response, transformer)\n        .on('data', (result) => {\n          // Data is flushed periodically (every 5 seconds), so we should\n          // handle it after flushing from the JSON parser.\n          let records = result.Records\n          // If null (= no records), change to an empty array.\n          if (!records) {\n            records = []\n          }\n\n          // Iterate over the notifications and emit them individually.\n          records.forEach((record) => {\n            this.emit('notification', record)\n          })\n\n          // If we're done, stop.\n          if (this.ending) {\n            response.destroy()\n          }\n        })\n        .on('error', (e) => this.emit('error', e))\n        .on('end', () => {\n          // Do it again, if we haven't cancelled yet.\n          process.nextTick(() => {\n            this.checkForChanges()\n          })\n        })\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}